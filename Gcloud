GOOD_HOST=good-host-project-id
GOOD_SVC=good-service-project-id

# BROKEN environment
BAD_HOST=bad-host-project-id
BAD_SVC=bad-service-project-id

GOOD_SVC_NUM=$(gcloud projects describe "$GOOD_SVC" --format='value(projectNumber)')

# Expected SAs for GKE-in-Shared-VPC
GKE_SA="service-${GOOD_SVC_NUM}@container-engine-robot.iam.gserviceaccount.com"
CLOUD_SA="${GOOD_SVC_NUM}@cloudservices.gserviceaccount.com"
NODE_SA="${GOOD_SVC_NUM}-compute@developer.gserviceaccount.com"

gcloud projects get-iam-policy "$GOOD_HOST" \
  --format='json' \
| jq -r --arg gke "$GKE_SA" --arg cloud "$CLOUD_SA" --arg node "$NODE_SA" '
  .bindings[]
  | select( any(.members[]?; contains($gke) or contains($cloud) or contains($node)) )


# If you know the cluster name/region in GOOD_SVC:
CLUSTER=good-cluster-name
REGION=us-central1   # or use --zone for zonal

gcloud container clusters describe "$CLUSTER" \
  --project="$GOOD_SVC" --region="$REGION" \
  --format='value(network,subnetwork,networkConfig.subnetwork)'

SUBNET=the-subnet-name
SUBNET_REGION=the-subnet-region

gcloud compute networks subnets get-iam-policy "$SUBNET" \
  --region="$SUBNET_REGION" --project="$GOOD_HOST" \
  --format='json' \
| jq -r --arg gke "$GKE_SA" --arg cloud "$CLOUD_SA" --arg node "$NODE_SA" '
  .bindings[]
  | select( any(.members[]?; contains($gke) or contains($cloud) or contains($node)) )


list gke sa that have the required role
gcloud projects get-iam-policy "$HOST_PROJECT_ID" \
  --flatten="bindings[]" \
  --format="table(bindings.role, bindings.members)" \
  --filter="bindings.role:roles/container.hostServiceAgentUser"
